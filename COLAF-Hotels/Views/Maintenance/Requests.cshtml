@inject IHttpContextAccessor HttpContextAccessor
@model IEnumerable<COLAFHotel.Models.MaintenanceRequest>
@{
    ViewBag.Title = "Maintenance Requests";
    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");
    var user = HttpContextAccessor.HttpContext?.Session.GetString("User");
}

<div class="container mx-auto p-6 bg-coffee-cream bg-opacity-10">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <div class="flex items-center space-x-3 mb-4 md:mb-0">
            <h2 class="text-2xl font-serif font-bold text-coffee-dark inline-block relative">
                <span class="relative z-10">Maintenance Request</span>
                <span class="absolute bottom-0 left-0 w-full h-2 bg-coffee-accent bg-opacity-40 -z-0"></span>
            </h2>
        </div>
        
        @if (role == "Guest")
        {
            <a class="px-5 py-3 bg-coffee-dark text-coffee-cream rounded-lg shadow-md hover:bg-coffee-medium transition flex items-center space-x-2 transform hover:scale-105 duration-200" asp-action="CreateRequest">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                <span>Create New Request</span>
            </a>
        }
    </div>

    <div class="bg-gradient-to-r from-coffee-cream to-white p-6 rounded-2xl shadow-lg border border-coffee-light">
        <div class="overflow-x-auto">
            <table class="w-full border-collapse">
                <thead>
                    <tr class="border-b-2 border-coffee-light">
                        <th class="py-4 px-4 text-left text-coffee-dark font-bold">ID</th>
                        <th class="py-4 px-4 text-left text-coffee-dark font-bold">Room Number</th>
                        <th class="py-4 px-4 text-left text-coffee-dark font-bold">Issue Description</th>
                        <th class="py-4 px-4 text-left text-coffee-dark font-bold">Request Date</th>
                        <th class="py-4 px-4 text-left text-coffee-dark font-bold">Resolved Date</th>
                        @if (role == "Guest")
                        {
                            <th class="py-4 px-4 text-left text-coffee-dark font-bold">Assigned to</th>
                        }
                        <th class="py-4 px-4 text-left text-coffee-dark font-bold">Status</th>
                        @if (role == "Housekeeper")
                        {
                            <th class="py-4 px-4 text-left text-coffee-dark font-bold">Actions</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Any())
                    {
                        @foreach (var request in Model)
                        {
                            <tr class="border-b border-coffee-cream hover:bg-coffee-cream/30 transition duration-150">
                                <td class="py-4 px-4 text-coffee-medium">@request.request_id</td>
                                <td class="py-4 px-4 text-coffee-medium">
                                    <div class="flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-coffee-light" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                        </svg>
                                        R.@request.Room.RoomNumber
                                    </div>
                                </td>
                                <td class="py-4 px-4 text-coffee-medium">@request.issue_description</td>
                                <td class="py-4 px-4 text-coffee-medium">@request.reported_date</td>
                                <td class="py-4 px-4 text-coffee-medium">@request.resolved_date</td>
                                @if (request.assigned != null && role == "Guest")
                                {
                                    <td class="py-4 px-4 text-coffee-medium">@request.assigned</td>
                                } else if (role == "Guest")
                                {
                                    <td class="py-4 px-4 text-coffee-dark">Pending...</td>
                                }
                                <td class="py-4 px-4">
                                    <span class="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium @GetStatusClass(request.status)">
                                        <span class="h-2 w-2 rounded-full mr-1.5 @GetStatusDotClass(request.status)"></span>
                                        @request.status
                                    </span>
                                </td>
                                @if (role == "Housekeeper")
                                {
                                    <td class="py-4 px-4">
                                        <div class="flex space-x-3">
                                            @if (request.status == "Pending")
                                            {
                                                <a href="@Url.Action("Accept", new { id = request.request_id })"
                                                   class="flex items-center justify-center w-10 h-10 bg-amber-500 hover:bg-amber-600 text-white rounded-lg shadow-md transform hover:scale-110 transition-all duration-200">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                                                    </svg>
                                                    <span class="sr-only">Accept</span>
                                                </a>
                                            }
                                            else if (request.status == "In Progress")
                                            {
                                                <a href="@Url.Action("Complete", new { id = request.request_id })"
                                                   class="flex items-center justify-center w-10 h-10 bg-green-600 hover:bg-green-700 text-white rounded-lg shadow-md transform hover:scale-110 transition-all duration-200">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                    </svg>
                                                    <span class="sr-only">Complete</span>
                                                </a>
                                            }
                                            @if (request.assigned == user)
                                            {
                                                <a href="@Url.Action("Edit", new { id = request.request_id })"
                                                   class="flex items-center justify-center w-10 h-10 bg-coffee-dark hover:bg-coffee-medium text-coffee-cream rounded-lg shadow-md transform hover:scale-110 transition-all duration-200">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                    </svg>
                                                    <span class="sr-only">Edit</span>
                                                </a>
                                            }
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="py-8 text-center text-coffee-medium">
                                <div class="flex flex-col items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-2 text-coffee-light" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                                    </svg>
                                    <p class="text-lg font-medium">No maintenance requests found</p>
                                    <p class="text-coffee-light mt-1">Create a new request to get started</p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@if (TempData["Notification"] != null)
{
    var notificationType = TempData["NotificationType"]?.ToString() ?? "info";
    var bgColor = notificationType switch
    {
        "success" => "bg-green-100 border-green-500 text-green-700",
        "warning" => "bg-yellow-100 border-yellow-500 text-yellow-700",
        "error" => "bg-red-100 border-red-500 text-red-700",
        _ => "bg-blue-100 border-blue-500 text-blue-700"
    };
    var icon = notificationType switch
    {
        "success" => "<svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/></svg>",
        "warning" => "<svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/></svg>",
        "error" => "<svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/></svg>",
        _ => "<svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/></svg>"
    };

    <div id="notification" class="fixed top-6 right-6 z-50 max-w-md transform transition-all duration-500 ease-in-out translate-x-0 opacity-100">
        <div class="flex items-center p-4 mb-4 rounded-lg border-l-4 shadow-lg @bgColor">
            <div class="mr-3">
                @Html.Raw(icon)
            </div>
            <div class="flex-grow">
                <p class="font-medium">@TempData["Notification"]</p>
            </div>
            <button type="button" class="ml-auto -mx-1.5 -my-1.5 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 inline-flex h-8 w-8 @bgColor" 
                    onclick="document.getElementById('notification').classList.add('translate-x-full', 'opacity-0')">
                <span class="sr-only">Close</span>
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
    </div>

    <script>
        // Auto-hide notification after 5 seconds
        setTimeout(function() {
            const notification = document.getElementById('notification');
            if (notification) {
                notification.classList.add('translate-x-full', 'opacity-0');
                setTimeout(() => notification.remove(), 500);
            }
        }, 5000);
    </script>
}
@functions {
    string GetStatusClass(string status)
    {
        return status switch
        {
            "Reported" => "bg-coffee-cream text-coffee-dark",
            "In Progress" => "bg-coffee-accent text-white",
            "Completed" => "bg-green-600 text-white",
            _ => "bg-gray-300 text-gray-700"
        };
    }

    string GetStatusDotClass(string status)
    {
        return status switch
        {
            "Reported" => "bg-coffee-dark",
            "In Progress" => "bg-white animate-pulse",
            "Completed" => "bg-white",
            _ => "bg-gray-400"
        };
    }
}