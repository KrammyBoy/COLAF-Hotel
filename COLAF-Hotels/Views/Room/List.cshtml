@model IEnumerable<COLAFHotel.Models.Room>
@{
    ViewBag.Title = "Room List";
}

<div class="max-w-6xl mx-auto p-6 bg-white rounded-lg shadow-md border border-[var(--fourth-color)]">
    <h2 class="text-[var(--primary-color)] text-3xl font-semibold mb-4">Room List</h2>

    <!-- Filter Section -->
    <div class="mb-4 flex flex-col gap-4">
        <!-- Filter by Category -->
        <div>
            <label for="filter-category" class="block text-lg font-medium text-gray-700">Filter by Category:</label>
            <select id="filter-category" class="w-full p-2 border border-gray-300 rounded-md" onchange="filterRooms()">
                <option value="all">All</option>
                @foreach (var category in Model.Select(r => r.Category).Distinct())
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>

        <!-- Filter by Floor -->
        <div>
            <label for="filter-floor" class="block text-lg font-medium text-gray-700">Filter by Floor:</label>
            <select id="filter-floor" class="w-full p-2 border border-gray-300 rounded-md" onchange="filterRooms()">
                <option value="all">All Floors</option>
                @foreach (var floor in Model.Select(r => r.RoomNumber.Substring(0, 1)).Distinct().OrderBy(f => f))
                {
                    <option value="@floor">Floor @floor</option>
                }
            </select>
        </div>
    </div>

    <!-- Room Cards -->
    <div id="room-container" class="flex flex-col gap-6">
        @foreach (var room in Model)
        {
            <div class="room-card bg-white shadow-lg rounded-lg border border-gray-200 p-4 flex w-full"
                 data-category="@room.Category" data-floor="@room.RoomNumber.Substring(0, 1)">
                <img src="@Url.Content(@room.ImageUrl)" alt="Room Image" class="w-[100%] h-[35vh] object-cover rounded-md mr-4">

                <div class="flex flex-col justify-between w-full">
                    <div>
                        <h3 class="text-2xl font-bold text-[var(--primary-color)] mb-2">Room @room.RoomNumber</h3>
                        <p class="text-lg text-gray-700">
                            Category:
                            <span class="text-[var(--fourth-color)] font-bold">
                                @room.Category
                            </span>
                        </p>
                        <p class="text-gray-600">
                            Status:
                            <span class="font-medium">@room.Status</span>
                        </p>
                        <p class="text-gray-500"><span class="font-medium">@room.Offerings</span></p>
                        <p class="text-2xl font-semibold text-green-600 mt-2 text-right">₱@room.Price.ToString("N2")</p>
                    </div>
                    <button class="mt-4 bg-[var(--primary-color)] text-white text-lg font-bold py-2 px-4 rounded-md shadow-md hover:bg-[var(--secondary-color)] transition">
                        Book Now
                    </button>
                    <a asp-action="Details" asp-route-roomNumber="@room.RoomNumber" class="mt-2 inline-block text-[var(--primary-color)] hover:underline">View Details</a>
                </div>
            </div>
        }
    </div>
</div>

<!--

TODO: This functionality should be managed in a separate file.

Booking Process:
1. When clicking "Book Now," a modal should appear, or the user should be redirected to a dedicated booking page.
2. Guests should be able to select their check-in and check-out dates using a calendar, with the selected duration clearly highlighted.

Checkout Process:
1. Guests can specify the number of occupants, which will dynamically adjust the total price.
2. Guests can enter the names of additional occupants.
3. An optional transportation service should be available, impacting the total price. This will require input for departure and arrival details.
4. A simulated payment method selection should be included (non-functional, for demonstration purposes).
5. Display booking policies for review.
6. Guests will have two options:
   - **Confirm Booking** to finalize the reservation.
   - **Save to "My Bookings"** to temporarily store the selection for future confirmation.

"My Bookings" Section:
- Guests can access their saved bookings and proceed with confirmation at a later time.

-->


<script>
    function filterRooms() {
        var selectedCategory = document.getElementById("filter-category").value;
        var selectedFloor = document.getElementById("filter-floor").value;
        var roomCards = document.querySelectorAll(".room-card");

        roomCards.forEach(card => {
            var roomCategory = card.getAttribute("data-category");
            var roomFloor = card.getAttribute("data-floor");

            var categoryMatch = (selectedCategory === "all" || roomCategory === selectedCategory);
            var floorMatch = (selectedFloor === "all" || roomFloor === selectedFloor);

            card.style.display = (categoryMatch && floorMatch) ? "flex" : "none";
        });
    }
</script>
