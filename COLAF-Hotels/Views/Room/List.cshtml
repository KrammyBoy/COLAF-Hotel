@model IEnumerable<COLAFHotel.Models.Room>
@{
    ViewBag.Title = "Rooms";
    var userRole = ViewBag.UserRole;
    
    // Check for active discount from session
    bool hasActiveDiscount = Context.Session.GetString("activeDiscount") == "true";
    string discountValueString = Context.Session.GetString("discountValue");
    decimal discountValue = string.IsNullOrEmpty(discountValueString) ? 0 : decimal.Parse(discountValueString);
    string promoCode = Context.Session.GetString("promoCode") ?? "";
    
    // Check for notification messages
    bool hasDiscountMessage = TempData["discountMessageSuccess"] != null;
}

<div class="max-w-7xl mx-auto p-4 md:p-8 bg-coffee-cream rounded-2xl shadow-xl border border-coffee-light/30">
    <!-- Modern Side Notification -->
<div id="notificationContainer" class="fixed top-24 right-0 z-50 w-full sm:w-96 px-4 transform translate-x-full transition-transform duration-500 ease-in-out">
    @if (hasDiscountMessage)
    {
        <div id="notificationBar" class="bg-white rounded-lg shadow-lg overflow-hidden border-l-4 border-green-500">
            <div class="p-4">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <div class="bg-green-100 p-2 rounded-full">
                            <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <h3 class="font-medium text-gray-800">Promo Applied!</h3>
                            <p class="text-sm text-gray-600">@TempData["discountMessageSuccess"]</p>
                            @if (hasActiveDiscount)
                            {
                                <p class="text-sm text-green-600 font-medium mt-1">@discountValue% off with code <span class="font-bold">@promoCode</span></p>
                            }
                        </div>
                    </div>
                    <button onclick="closeNotification()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <!-- Progress bar timer -->
            <div id="notificationTimer" class="h-1 bg-green-500 transform scale-x-0 origin-left transition-transform duration-5000 ease-linear"></div>
        </div>
    }
</div>

    <h2 class="text-coffee-dark text-3xl md:text-5xl font-bold mb-6 md:mb-8 text-center tracking-tight">Discover Our Rooms</h2>

    <!-- Filters -->
    <div class="flex flex-col md:flex-row gap-4 mb-6 md:mb-10">
        <!-- Floor Filter -->
        <div class="relative flex-1">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg class="w-5 h-5 text-coffee-medium" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
            <select id="floorFilter" class="block w-full pl-10 pr-4 py-3 text-coffee-dark bg-white border border-coffee-light rounded-xl focus:ring-2 focus:ring-coffee-accent focus:border-coffee-accent appearance-none cursor-pointer shadow-sm transition-all duration-200 hover:bg-coffee-cream/50" onchange="filterRooms()">
                <option value="">All Floors</option>
                @foreach (var floor in Model.Select(r => r.RoomNumber.ToString().Substring(0, 1)).Distinct())
                {
                    <option value="@floor">Floor @floor</option>
                }
            </select>
        </div>

        <!-- Status Filter -->
        <div class="relative flex-1">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg class="w-5 h-5 text-coffee-medium" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <select id="statusFilter" class="block w-full pl-10 pr-4 py-3 text-coffee-dark bg-white border border-coffee-light rounded-xl focus:ring-2 focus:ring-coffee-accent focus:border-coffee-accent appearance-none cursor-pointer shadow-sm transition-all duration-200 hover:bg-coffee-cream/50" onchange="filterRooms()">
                <option value="">All Statuses</option>
                <option value="Vacant">Vacant</option>
                <option value="Occupied">Occupied</option>
            </select>
        </div>

        <!-- Category Filter -->
        <div class="relative flex-1">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg class="w-5 h-5 text-coffee-medium" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18M3 18h18M3 6h18"></path>
                </svg>
            </div>
            <select id="categoryFilter" class="block w-full pl-10 pr-4 py-3 text-coffee-dark bg-white border border-coffee-light rounded-xl focus:ring-2 focus:ring-coffee-accent focus:border-coffee-accent appearance-none cursor-pointer shadow-sm transition-all duration-200 hover:bg-coffee-cream/50" onchange="filterRooms()">
                <option value="">All Categories</option>
                @foreach (var category in Model.Select(r => r.Category).Distinct())
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
    </div>

    <!-- Room Cards -->
    <div id="room-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var room in Model.Where(r => r.Status == "Vacant" || r.Status == "Occupied"))
        {
            <div class="room-card bg-white rounded-2xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-2xl transform hover:-translate-y-1 border border-coffee-light/20"
                 data-floor="@room.RoomNumber.ToString().Substring(0, 1)"
                 data-category="@room.Category"
                 data-status="@room.Status">
                <div class="relative">
                    <img src="@Url.Content(@room.ImageUrl)" alt="Room @room.RoomNumber" class="w-full h-48 md:h-64 object-cover">
                    <div class="absolute top-0 right-0 bg-coffee-dark/80 text-white px-3 py-1 md:px-4 md:py-2 rounded-bl-lg font-semibold text-sm md:text-base">
                        Room @room.RoomNumber
                    </div>
                </div>

                <div class="p-4 md:p-6">
                    <div class="flex justify-between items-start mb-3 md:mb-4">
                        <h3 class="text-xl md:text-2xl font-bold text-coffee-dark">@room.Category</h3>
                        @if (hasActiveDiscount)
                        {
                            decimal originalPrice = room.Price;
                            decimal discountAmount = originalPrice * (discountValue / 100.0m);
                            decimal discountedPrice = originalPrice - discountAmount;
                            
                            <div class="text-right">
                                <span class="text-sm text-gray-500 line-through">₱@originalPrice.ToString("N2")</span>
                                <span class="block text-xl md:text-2xl font-bold text-green-600">₱@discountedPrice.ToString("N2")</span>
                                <span class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">@discountValue% OFF</span>
                            </div>
                        }
                        else
                        {
                            <span class="text-xl md:text-2xl font-bold text-coffee-accent">₱@room.Price.ToString("N2")</span>
                        }
                    </div>

                    <div class="flex items-center mb-4 md:mb-6">
                        @{
                            string statusBadgeClass = "inline-flex items-center px-2 md:px-3 py-1 rounded-full text-xs md:text-sm font-medium ";
                            string statusIcon = "";

                            switch (room.Status.ToLower())
                            {
                                case "vacant":
                                    statusBadgeClass += "bg-green-100 text-green-800";
                                    statusIcon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z'></path>";
                                    break;
                                case "occupied":
                                    statusBadgeClass += "bg-red-100 text-red-800";
                                    statusIcon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z'></path>";
                                    break;
                            }
                        }

                        <span class="@statusBadgeClass">
                            <svg class="w-3 h-3 md:w-4 md:h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                @Html.Raw(statusIcon)
                            </svg>
                            @room.Status
                        </span>
                    </div>

                    <div class="flex flex-col md:flex-row gap-3 md:items-center md:justify-between">
                        <div class="flex items-center">
                            <svg class="w-4 h-4 md:w-5 md:h-5 text-coffee-medium mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
                            </svg>
                            <span class="text-coffee-medium text-sm md:text-base">Floor @room.RoomNumber.ToString().Substring(0, 1)</span>
                        </div>

                        @if (userRole == "Guest")
                        {
                            var bookingParams = new { 
                                roomId = room.RoomId, 
                                roomNumber = room.RoomNumber, 
                                roomImg = room.ImageUrl, 
                                roomCategory = room.Category, 
                                roomPrice = hasActiveDiscount ? room.Price * (1 - (discountValue / 100.0m)) : room.Price 
                            };
                            
                            <a href="@Url.Action("Create", "Booking", bookingParams)"
                               class="inline-flex items-center justify-center px-4 md:px-6 py-2 md:py-3 bg-coffee-medium text-white font-medium rounded-lg transition-colors duration-300 hover:bg-coffee-dark focus:ring-4 focus:ring-coffee-light focus:ring-opacity-50 text-sm md:text-base mt-2 md:mt-0">
                                BOOK NOW
                                <svg class="w-4 h-4 md:w-5 md:h-5 ml-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                                </svg>
                            </a>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-12">
        <svg class="mx-auto h-16 w-16 text-coffee-light" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 class="mt-4 text-lg md:text-xl font-medium text-coffee-medium">No matching rooms found</h3>
        <p class="mt-2 text-coffee-light">Try adjusting your filters to find more rooms</p>
    </div>
</div>

<script>
    function filterRooms() {
        let floorFilter = document.getElementById("floorFilter").value;
        let categoryFilter = document.getElementById("categoryFilter").value;
        let statusFilter = document.getElementById("statusFilter").value;
        let rooms = document.querySelectorAll(".room-card");
        let visibleCount = 0;

        rooms.forEach(room => {
            let roomFloor = room.getAttribute("data-floor");
            let roomCategory = room.getAttribute("data-category");
            let roomStatus = room.getAttribute("data-status");

            if ((floorFilter === "" || roomFloor === floorFilter) &&
                (categoryFilter === "" || roomCategory === categoryFilter) &&
                (statusFilter === "" || roomStatus === statusFilter)) {
                room.style.display = "block";
                visibleCount++;
            } else {
                room.style.display = "none";
            }
        });

        // Show/hide no results message
        document.getElementById("no-results").style.display = visibleCount === 0 ? "block" : "none";
    }

    // Function to close notification manually
    function closeNotification() {
        const container = document.getElementById('notificationContainer');
        if (container) {
            container.classList.remove('translate-x-0');
            container.classList.add('translate-x-full');
        }
    }

    // Initialize on page load
    document.addEventListener("DOMContentLoaded", function() {
        // Show notification with animation
        const container = document.getElementById('notificationContainer');
        const timer = document.getElementById('notificationTimer');
        
        if (container) {
            // Show notification with slide-in animation after a short delay
            setTimeout(() => {
                container.classList.remove('translate-x-full');
                container.classList.add('translate-x-0');
                
                // Start the progress bar animation
                if (timer) {
                    timer.classList.remove('scale-x-0');
                    timer.classList.add('scale-x-100');
                }
                
                // Auto-hide notification after timer completes
                setTimeout(() => {
                    container.classList.remove('translate-x-0');
                    container.classList.add('translate-x-full');
                }, 5000);
            }, 300);
        }
        
        // Add animation to the room cards
        let rooms = document.querySelectorAll(".room-card");
        rooms.forEach((room, index) => {
            room.style.opacity = "0";
            room.style.transform = "translateY(20px)";
            setTimeout(() => {
                room.style.transition = "opacity 0.5s ease, transform 0.5s ease";
                room.style.opacity = "1";
                room.style.transform = "translateY(0)";
            }, 100 + (index * 50));
        });
    });
</script>