@model IEnumerable<COLAFHotel.Models.Room>
@{
    ViewBag.Title = "Rooms";
    var userRole = ViewBag.UserRole; // Get the role from ViewBag
}

<div class="max-w-7xl mx-auto p-8 bg-amber-50 rounded-2xl shadow-xl border border-amber-800/30">
    <h2 class="text-amber-900 text-5xl font-bold mb-8 text-center tracking-tight">Discover Our Rooms</h2>
    
    <!-- Filters -->
    <div class="flex flex-col md:flex-row gap-4 mb-10">
        <!-- Floor Filter -->
        <div class="relative flex-1">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg class="w-5 h-5 text-amber-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
            <select id="floorFilter" class="block w-full pl-10 pr-4 py-3 text-amber-900 bg-amber-100 border border-amber-300 rounded-xl focus:ring-2 focus:ring-amber-500 focus:border-amber-500 appearance-none cursor-pointer shadow-sm transition-all duration-200 hover:bg-amber-200" onchange="filterRooms()">
                <option value="">All Floors</option>
                @foreach (var floor in Model.Select(r => r.RoomNumber.ToString().Substring(0, 1)).Distinct())
                {
                    <option value="@floor">Floor @floor</option>
                }
            </select>
        </div>

        <!-- Category Filter -->
        <div class="relative flex-1">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg class="w-5 h-5 text-amber-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18M3 18h18M3 6h18"></path>
                </svg>
            </div>
            <select id="categoryFilter" class="block w-full pl-10 pr-4 py-3 text-amber-900 bg-amber-100 border border-amber-300 rounded-xl focus:ring-2 focus:ring-amber-500 focus:border-amber-500 appearance-none cursor-pointer shadow-sm transition-all duration-200 hover:bg-amber-200" onchange="filterRooms()">
                <option value="">All Categories</option>
                @foreach (var category in Model.Select(r => r.Category).Distinct())
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
    </div>

    <!-- Room Cards -->
    <div id="room-container" class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        @foreach (var room in Model)
        {
            <div class="room-card bg-white rounded-2xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-2xl transform hover:-translate-y-1 border border-amber-200"
                 data-floor="@room.RoomNumber.ToString().Substring(0, 1)"
                 data-category="@room.Category">
                <div class="relative">
                    <img src="@Url.Content(@room.ImageUrl)" alt="Room @room.RoomNumber" class="w-full h-64 object-cover">
                    <div class="absolute top-0 right-0 bg-amber-900/80 text-white px-4 py-2 rounded-bl-lg font-semibold">
                        Room @room.RoomNumber
                    </div>
                </div>
                
                <div class="p-6">
                    <div class="flex justify-between items-start mb-4">
                        <h3 class="text-2xl font-bold text-amber-900">@room.Category</h3>
                        <span class="text-2xl font-bold text-amber-700">₱@room.Price.ToString("N2")</span>
                    </div>
                    
                    <div class="flex items-center mb-6">
                        @{
                            string statusBadgeClass = "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ";
                            string statusIcon = "";
        
                            switch (room.Status.ToLower())
                            {
                                case "available":
                                    statusBadgeClass += "bg-green-100 text-green-800";
                                    statusIcon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z'></path>";
                                    break;
                                case "occupied":
                                case "booked":
                                    statusBadgeClass += "bg-red-100 text-red-800";
                                    statusIcon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z'></path>";
                                    break;
                                case "maintenance":
                                    statusBadgeClass += "bg-yellow-100 text-yellow-800";
                                    statusIcon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'></path>";
                                    break;
                                default:
                                    statusBadgeClass += "bg-amber-100 text-amber-800";
                                    statusIcon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'></path>";
                                    break;
                            }
                        }
    
                        <span class="@statusBadgeClass">
                            <svg class="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                @Html.Raw(statusIcon)
                            </svg>
                            @room.Status
                        </span>
                    </div>
                    
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <svg class="w-5 h-5 text-amber-600 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
                            </svg>
                            <span class="text-amber-900">Floor @room.RoomNumber.ToString().Substring(0, 1)</span>
                        </div>

                        @if (userRole == "Guest")
                        {
                            <a href="@Url.Action("Create", "Booking", new { roomId = room.RoomId, roomNumber = room.RoomNumber, roomImg = room.ImageUrl, roomCategory = room.Category, roomPrice = room.Price })" 
                                    class="inline-flex items-center px-6 py-3 bg-amber-700 text-white font-medium rounded-lg transition-colors duration-300 hover:bg-amber-800 focus:ring-4 focus:ring-amber-600 focus:ring-opacity-50">
                                BOOK NOW
                                <svg class="w-5 h-5 ml-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                                </svg>
                            </a>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    function filterRooms() {
        let floorFilter = document.getElementById("floorFilter").value;
        let categoryFilter = document.getElementById("categoryFilter").value;
        let rooms = document.querySelectorAll(".room-card");

        rooms.forEach(room => {
            let roomFloor = room.getAttribute("data-floor");
            let roomCategory = room.getAttribute("data-category");

            if ((floorFilter === "" || roomFloor === floorFilter) &&
                (categoryFilter === "" || roomCategory === categoryFilter)) {
                room.style.display = "block";
            } else {
                room.style.display = "none";
            }
        });
    }
</script>