@model IEnumerable<COLAFHotel.Models.Room>
@{
    ViewBag.Title = "Manage Rooms";
}

<div class="container mx-auto p-6 pt-20">
    <h2 class="text-3xl font-semibold text-[var(--primary-color)] mb-4 flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-7 h-7 mr-2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4 10h16M4 14h16M4 18h16"></path>
        </svg>
        Manage Rooms
    </h2>

    <a href="@Url.Action("CreateRoom", "Room")" class="bg-[var(--primary-color)] text-white px-4 py-2 rounded-lg flex items-center w-max hover:bg-[var(--third-color)] transition">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 mr-1">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"></path>
        </svg>
        Create New Room
    </a>
    <!-- Filters -->
    <div class="flex flex-col sm:flex-row gap-4 my-6">
        <!-- Floor Filter -->
        <div class="flex items-center bg-gray-800 text-white px-3 py-2 rounded-lg w-full sm:w-1/3">
            <svg class="w-5 h-5 text-gray-300 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
            </svg>
            <select id="floorFilter" class="bg-gray-800 text-white w-full outline-none" onchange="filterRooms()">
                <option value="">All Floors</option>
                @foreach (var floor in Model.Select(r => r.RoomNumber.ToString().Substring(0, 1)).Distinct())
                {
                    <option value="@floor">Floor @floor</option>
                }
            </select>
        </div>

        <!-- Category Filter -->
        <div class="flex items-center bg-gray-800 text-white px-3 py-2 rounded-lg w-full sm:w-1/3">
            <svg class="w-5 h-5 text-gray-300 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m-4 4V4m8 4V4m-6 14h6a2 2 0 002-2v-6m-8 8h-6a2 2 0 01-2-2v-6"></path>
            </svg>
            <select id="categoryFilter" class="bg-gray-800 text-white w-full outline-none" onchange="filterRooms()">
                <option value="">All Categories</option>
                @foreach (var category in Model.Select(r => r.Category).Distinct())
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <!-- Status Filter -->
        <div class="flex items-center bg-gray-800 text-white px-3 py-2 rounded-lg w-full sm:w-1/3">
            <svg class="w-5 h-5 text-gray-300 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m2-5H7a2 2 0 00-2 2v14a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2z" />
            </svg>
            <select id="statusFilter" class="bg-gray-800 text-white w-full outline-none" onchange="filterRooms()">
                <option value="">All Categories</option>
                @foreach (var status in Model.Select(r => r.Status).Distinct())
                {
                    <option value="@status">@status</option>
                }
            </select>
        </div>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
        @foreach (var room in Model)
        {
            <div class="bg-white shadow-lg rounded-lg overflow-hidden room-card" 
                data-floor="@room.RoomNumber.ToString().Substring(0, 1)"
                data-category="@room.Category"
                data-status="@room.Status">
                <img src="@Url.Content(@room.ImageUrl)" alt="Room Image" class="w-full h-40 object-cover">

                <div class="p-4">
                    <h3 class="text-xl font-semibold text-gray-800">@room.RoomNumber - @room.Category</h3>
                    <p class="text-gray-600 text-sm">@room.ImageType</p>
                    <p class="text-sm text-gray-500">Status: <span class="font-semibold">@room.Status</span></p>
                    <p class="text-lg font-bold text-[var(--primary-color)] mt-2">₱@room.Price.ToString("N2")</p>

                    <div class="flex justify-between items-center mt-4">
                        <!-- Update Button -->
                        <button onclick="openUpdateModal(@room.RoomId, '@room.ImageType', '@room.Category', '@room.Status', @room.Price, '@room.RoomNumber')"
                                class="flex items-center bg-blue-500 text-white px-3 py-2 rounded-lg hover:bg-blue-700 transition">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 mr-1">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4 13.5V17a1 1 0 001 1h3.5m9.5-12l-6.5 6.5m0 0L9 14m0 0H5v-4l4-4h4l4 4v4"></path>
                            </svg>
                            Update
                        </button>

                        <!-- Delete Button -->
                        <button onclick="confirmDelete(@room.RoomId)"
                           class="flex items-center bg-red-500 text-white px-3 py-2 rounded-lg hover:bg-red-700 transition">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 mr-1">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Update Modal -->
<div id="updateModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white p-6 rounded-lg w-96 shadow-lg transform transition-all scale-95 opacity-0" id="modalContent">
        <h3 class="text-xl font-semibold mb-4">Update Room <span id="updateRoomNumber" class="text-green-600"></span></h3>
        <form id="updateForm">
            <input type="hidden" id="updateRoomId">

            <label class="block text-gray-700">Type:</label>
            <select id="updateType" class="border p-2 w-full mb-2 rounded">
                <option value="alpha">Alpha</option>
                <option value="beta">Beta</option>
            </select>

            <label class="block text-gray-700">Category:</label>
            <select id="updateCategory" class="border p-2 w-full mb-2 rounded">
                <option value="Deluxe">Deluxe</option>
                <option value="Suite">Suite</option>
                <option value="Standard">Standard</option>
            </select>

            <label class="block text-gray-700">Status:</label>
            <select id="updateStatus" class="border p-2 w-full mb-2 rounded">
                <option value="Vacant">Vacant</option>
                <option value="Occupied">Occupied</option>
                <option value="Under Maintenance">Under Maintenance</option>
            </select>

            <label class="block text-gray-700">Price:</label>
            <input type="number" id="updatePrice" class="border p-2 w-full mb-4 rounded">

            <div class="flex justify-between">
                <button type="button" onclick="closeModal()" class="bg-gray-400 text-white px-4 py-2 rounded hover:bg-gray-500 transition">
                    Cancel
                </button>
                <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-700 transition">
                    Save Changes
                </button>
            </div>
        </form>
    </div>
</div>
<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-sm">
        <h3 class="text-lg font-semibold mb-4">Confirm Deletion</h3>
        <p class="text-gray-700 mb-4">Are you sure you want to delete this user?</p>
        <div class="flex justify-end space-x-2">
            <button class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" onclick="closeModal()">Cancel</button>
            <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">Delete</button>
        </div>
    </div>
</div>
<!-- Toast Notification -->
<div id="toast" class="fixed bottom-5 right-5 bg-green-500 text-white px-4 py-2 rounded shadow-lg hidden transition transform scale-95 opacity-0">
    <p id="toastMessage"></p>
</div>

<script>
    function confirmDelete(id) {
        console.log(`🔍 Attempting to delete room_id: ${id}`);

        if (!confirm("Are you sure you want to delete this room?")) {
            console.log("❌ Deletion cancelled.");
            return;
        }

        fetch(`/Room/DeleteRoom/${id}`, { method: 'DELETE' })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.text();  // Read as text first
            })
            .then(text => {
                if (!text) {
                    throw new Error("❌ Empty response from server!");
                }
                return JSON.parse(text); // Convert text to JSON
            })
            .then(data => {
                console.log(`✅ Room deleted successfully:`, data);
                alert(data.message);
                location.reload(); // ✅ Refresh after deletion
            })
            .catch(error => console.error('❌ Error deleting room:', error));
    }

    function closeDeleteModal() {
        document.getElementById("deleteModal").classList.add("hidden");
    }
    function openUpdateModal(id, type, category, status, price, number) {
        document.getElementById("updateRoomId").value = id;
        document.getElementById("updateType").value = type;
        document.getElementById("updateCategory").value = category;
        document.getElementById("updateStatus").value = status;
        document.getElementById("updatePrice").value = price;
        document.getElementById("updateRoomNumber").innerText = number;

        const modal = document.getElementById("updateModal");
        const modalContent = document.getElementById("modalContent");
        modal.classList.remove("hidden");
        setTimeout(() => {
            modalContent.classList.remove("scale-95", "opacity-0");
            modalContent.classList.add("scale-100", "opacity-100");
        }, 50);
    }

    function closeModal() {
        const modal = document.getElementById("updateModal");
        const modalContent = document.getElementById("modalContent");
        modalContent.classList.remove("scale-100", "opacity-100");
        modalContent.classList.add("scale-95", "opacity-0");
        setTimeout(() => {
            modal.classList.add("hidden");
        }, 200);
    }

    function showToast(message) {
        const toast = document.getElementById("toast");
        const toastMessage = document.getElementById("toastMessage");
        toastMessage.innerText = message;
        toast.classList.remove("hidden", "scale-95", "opacity-0");
        toast.classList.add("scale-100", "opacity-100");
        setTimeout(() => {
            toast.classList.remove("scale-100", "opacity-100");
            toast.classList.add("scale-95", "opacity-0");
            setTimeout(() => {
                toast.classList.add("hidden");
            }, 200);
        }, 3000);
    }

    document.getElementById("updateForm").addEventListener("submit", function (e) {
        e.preventDefault();
        var updatedRoom = {
            RoomId: document.getElementById("updateRoomId").value,
            ImageType: document.getElementById("updateType").value,
            Category: document.getElementById("updateCategory").value,
            Status: document.getElementById("updateStatus").value,
            Price: parseFloat(document.getElementById("updatePrice").value)
        };

        fetch("/Room/UpdateRoom", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(updatedRoom)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast("Room updated successfully!");
                setTimeout(() => {
                    location.reload();
                }, 2000);
            }
        });

        closeModal();
    });
    function filterRooms() {
        let floorFilter = document.getElementById("floorFilter").value;
        let categoryFilter = document.getElementById("categoryFilter").value;
        let statusFilter = document.getElementById("statusFilter").value;
        let rooms = document.querySelectorAll(".room-card");

        rooms.forEach(room => {
            let roomFloor = room.getAttribute("data-floor");
            let roomCategory = room.getAttribute("data-category");
            let roomStatus = room.getAttribute("data-status"); // Corrected selector

            // Check if the room matches the selected filters
            let matchesFloor = (floorFilter === "" || roomFloor === floorFilter);
            let matchesCategory = (categoryFilter === "" || roomCategory === categoryFilter);
            let matchesStatus = (statusFilter === "" || roomStatus === statusFilter);

            // Show or hide room based on filters
            if (matchesFloor && matchesCategory && matchesStatus) {
                room.style.display = "block";
            } else {
                room.style.display = "none";
            }
        });
    }

</script>

