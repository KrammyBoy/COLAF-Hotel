@inject IHttpContextAccessor HttpContextAccessor
@model IEnumerable<COLAFHotel.Models.Booking>
@{
    ViewBag.Title = "Bookings";
    var guestName = TempData["GuestName"] as string;
    var successMessage = TempData["Success"] as string;
    var bookingId = TempData["BookingId"] != null ? Convert.ToInt32(TempData["BookingId"]) : 0;
    var CheckInDate = TempData["CheckInDate"] as string;
    var CheckOutDate = TempData["CheckOutDate"] as string;

    var totalAmount = TempData["TotalAmount"] != null ? Convert.ToDecimal(TempData["TotalAmount"]) : 0;
    var totalBalance = TempData["TotalBalance"] != null ? Convert.ToDecimal(TempData["TotalBalance"]) : 0;

    var currentDate = TempData["CurrentDate"] as string;
    var Temp_RoomNumber = TempData["RoomNumber"] as string;
    var Temp_RoomRate = TempData["RoomRate"] != null ? Convert.ToDecimal(TempData["RoomRate"]) : 0;
    var Temp_NumberOfNights = TempData["NumberOfNights"] != null ? Convert.ToInt32(TempData["NumberOfNights"]) : 0;

    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");
}

<div class="container mx-auto p-6 bg-coffee-cream bg-opacity-10">
    <div class="mb-8">
        <h3 class="text-2xl font-serif font-bold text-coffee-dark inline-block relative">
            <span class="relative z-10">Booking History</span>
            <span class="absolute bottom-0 left-0 w-full h-2 bg-coffee-accent bg-opacity-40 -z-0"></span>
        </h3>
        @if (role == "Guest")
        {
            <p class="text-coffee-medium mt-2">View and manage your stay reservations</p>
        }
        else if (role == "Staff")
        {
            <a class="px-5 py-3 bg-coffee-dark text-coffee-cream rounded-lg shadow-md hover:bg-coffee-medium transition flex items-center space-x-2 mt-2" asp-action="AddBookingWalkIn">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                <span>Add Booking for Walk in</span>
            </a>
        }
    </div>

    <div class="mb-6 bg-white p-4 rounded-lg shadow border border-coffee-cream">
        <div class="flex flex-col md:flex-row md:justify-between gap-4">
            <!-- Search Box -->
            <div class="w-full md:w-1/3">
                <label for="searchInput" class="block text-sm font-medium text-coffee-dark mb-1">Search</label>
                <input type="text" id="searchInput" placeholder="Search by guest name, room number, or booking ID..."
                       class="w-full px-3 py-2 border border-coffee-cream rounded-md focus:outline-none focus:ring-2 focus:ring-coffee-accent">
            </div>

            <!-- Filter Options -->
            <div class="w-full md:w-2/3 grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label for="guestSort" class="block text-sm font-medium text-coffee-dark mb-1">Guest Name</label>
                    <select id="guestSort" class="w-full px-3 py-2 border border-coffee-cream rounded-md focus:outline-none focus:ring-2 focus:ring-coffee-accent">
                        <option value="">Sort by</option>
                        <option value="asc">A-Z</option>
                        <option value="desc">Z-A</option>
                    </select>
                </div>
                <div>
                    <label for="bookingSort" class="block text-sm font-medium text-coffee-dark mb-1">Booking ID</label>
                    <select id="bookingSort" class="w-full px-3 py-2 border border-coffee-cream rounded-md focus:outline-none focus:ring-2 focus:ring-coffee-accent">
                        <option value="">Sort by</option>
                        <option value="asc">Lowest first</option>
                        <option value="desc">Highest first</option>
                    </select>
                </div>
                <div>
                    <label for="checkinSort" class="block text-sm font-medium text-coffee-dark mb-1">Check-in Date</label>
                    <select id="checkinSort" class="w-full px-3 py-2 border border-coffee-cream rounded-md focus:outline-none focus:ring-2 focus:ring-coffee-accent">
                        <option value="">Sort by</option>
                        <option value="asc">Earliest first</option>
                        <option value="desc">Latest first</option>
                    </select>
                </div>
                <div>
                    <label for="checkoutSort" class="block text-sm font-medium text-coffee-dark mb-1">Check-out Date</label>
                    <select id="checkoutSort" class="w-full px-3 py-2 border border-coffee-cream rounded-md focus:outline-none focus:ring-2 focus:ring-coffee-accent">
                        <option value="">Sort by</option>
                        <option value="asc">Earliest first</option>
                        <option value="desc">Latest first</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="mt-4 flex justify-between items-center">
            <div class="flex items-center">
                <input type="checkbox" id="hideCancelled" class="h-4 w-4 text-coffee-accent focus:ring-coffee-accent" checked>
                <label for="hideCancelled" class="ml-2 block text-sm text-coffee-dark">Hide cancelled reservations</label>
            </div>
            <div>
                <button id="resetFilters" class="px-3 py-1 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-md transition-colors duration-150 text-sm">
                    Reset Filters
                </button>
                <button id="applyFilters" class="ml-2 px-3 py-1 bg-coffee-accent hover:bg-coffee-dark text-white rounded-md transition-colors duration-150 text-sm">
                    Apply Filters
                </button>
            </div>
        </div>
    </div>


    <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-coffee-cream">
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead>
                    <tr class="bg-coffee-dark text-coffee-cream">
                        @if (Context.Session.GetString("Role") == "Staff" || Context.Session.GetString("Role") == "Admin")
                        {
                            <th class="py-4 px-6 text-left font-medium text-sm tracking-wider">Guest Name</th>
                        }
                        <th class="py-4 px-6 text-left font-medium text-sm tracking-wider">Booking ID</th>
                        <th class="py-4 px-6 text-left font-medium text-sm tracking-wider">Room</th>
                        <th class="py-4 px-6 text-left font-medium text-sm tracking-wider">Check-In</th>
                        <th class="py-4 px-6 text-left font-medium text-sm tracking-wider">Check-Out</th>
                        <th class="py-4 px-6 text-left font-medium text-sm tracking-wider">Status</th>
                        <th class="py-4 px-6 text-left font-medium text-sm tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-coffee-cream">
                    @foreach (var booking in Model)
                    {
                        <tr class="hover:bg-coffee-cream hover:bg-opacity-20 transition-colors duration-150">
                            @if (Context.Session.GetString("Role") == "Staff" || Context.Session.GetString("Role") == "Admin")
                            {
                                @if (booking.guestName != null)
                                {
                                    <td class="py-4 px-6 text-coffee-medium">@booking.guestName (WALK IN)</td>
                                }else
                                {
                                    <td class="py-4 px-6 text-coffee-medium">@booking.Guest.User.firstname @booking.Guest.User.lastname</td>
                                }
                            }
                            <td class="py-4 px-6 text-coffee-dark font-medium">#@booking.booking_id</td>
                            <td class="py-4 px-6 text-coffee-medium">Room @booking.Room.RoomNumber</td>
                            <td class="py-4 px-6 text-coffee-medium">@booking.check_in_date.ToString("MMM dd, yyyy")</td>
                            <td class="py-4 px-6 text-coffee-medium">@booking.check_out_date.ToString("MMM dd, yyyy")</td>
                            <td class="py-4 px-6">
                                @if (booking.status == "Confirmed")
                                {
                                    <span class="px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 border border-green-200">
                                        Confirmed
                                    </span>
                                }
                                else if (booking.status == "Pending")
                                {
                                    <span class="px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 border border-yellow-200">
                                        Pending
                                    </span>
                                }
                                else if (booking.status == "Checked In")
                                {
                                    <span class="px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200">
                                        Checked In
                                    </span>
                                }
                                else if (booking.status == "Checked Out" || booking.status == "Paid")
                                {
                                    <span class="px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 border border-purple-200">
                                        @booking.status
                                    </span>
                                }
                                else
                                {
                                    <span class="px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 border border-red-200">
                                        @booking.status
                                    </span>
                                }
                            </td>
                            <td class="py-4 px-6">
                                <a asp-action="Details" asp-route-id="@booking.booking_id"
                                   class="text-coffee-accent hover:text-coffee-dark font-medium transition-colors">
                                    View Details
                                </a>
                                <a asp-action="Invoice" asp-route-id="@booking.booking_id"
                                   class="text-coffee-accent hover:text-coffee-dark font-medium transition-colors">
                                    Invoice
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (!Model.Any())
        {
            <div class="py-12 text-center">
                <svg class="mx-auto h-12 w-12 text-coffee-light" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                </svg>
                <p class="mt-4 text-coffee-medium">No bookings found in your history</p>
                <a href="/Room/List" class="mt-4 inline-block px-4 py-2 bg-coffee-accent text-white rounded-lg hover:bg-coffee-dark transition-colors">
                    Browse Rooms
                </a>
            </div>
        }
    </div>
</div>


@if (TempData["Success"] != null){
    <div id="bookingModal" class="fixed inset-0 flex items-center justify-center bg-coffee-dark bg-opacity-75 z-50">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-[50%] transform transition-all duration-300 overflow-hidden">
            <!-- Receipt Header -->
            <div class="bg-coffee-dark p-6 text-center border-b border-coffee-cream">
                <div class="mx-auto mb-3 bg-coffee-accent bg-opacity-20 p-3 rounded-full inline-flex">
                    <svg class="h-6 w-6 text-coffee-accent" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
                <h2 class="text-xl font-serif font-bold text-coffee-cream">Booking Confirmed!</h2>
                <p class="text-coffee-cream text-opacity-80 text-sm mt-2">Thank you for your reservation</p>
            </div>

            <!-- Receipt Content -->
            <div class="p-6">
                <!-- Receipt Title -->
                <div class="flex justify-between items-center mb-4 pb-3 border-b border-dashed border-coffee-cream">
                    <div>
                        <h3 class="font-serif font-bold text-coffee-dark">RECEIPT</h3>
                        <p class="text-coffee-medium text-xs">@currentDate</p>
                    </div>
                    <div class="bg-coffee-dark text-white text-xs px-3 py-1 rounded-full">
                        #@bookingId
                    </div>
                </div>

                <!-- Guest Info -->
                <div class="mb-4">
                    <p class="text-coffee-medium text-xs uppercase font-medium tracking-wider">Guest Information</p>
                    <p class="font-medium text-coffee-dark">@guestName</p>
                    <p class="text-coffee-medium text-sm">Room @Temp_RoomNumber</p>
                </div>

                <!-- Dates Info -->
                <div class="bg-coffee-cream bg-opacity-20 p-4 rounded-lg mb-4">
                    <div class="flex justify-between mb-2">
                        <div class="flex items-center">
                            <svg class="h-4 w-4 text-coffee-medium mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <span class="text-coffee-medium">Check-in:</span>
                        </div>
                        <span class="font-medium text-coffee-dark">@CheckInDate</span>
                    </div>
                    <div class="flex justify-between">
                        <div class="flex items-center">
                            <svg class="h-4 w-4 text-coffee-medium mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <span class="text-coffee-medium">Check-out:</span>
                        </div>
                        <span class="font-medium text-coffee-dark">@CheckOutDate</span>
                    </div>
                </div>

                <!-- Payment Details -->
                <div class="mb-4">
                    <p class="text-coffee-medium text-xs uppercase font-medium tracking-wider mb-2">Payment Details</p>
                    <div class="space-y-2">
                        <div class="flex justify-between text-sm">
                            <span class="text-coffee-medium">Room Rate:</span>
                            <span class="text-coffee-dark">₱@Temp_RoomRate</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="text-coffee-medium">Number of Nights:</span>
                            <span class="text-coffee-dark">@Temp_NumberOfNights</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="text-coffee-medium">Payment Method:</span>
                            <span class="text-coffee-dark">Online</span>
                        </div>
                    </div>
                </div>

                <!-- Total Amount -->
                <div class="bg-coffee-dark text-white p-4 rounded-lg flex justify-between items-center">
                    <span class="font-medium">Total Amount:</span>
                    <span class="font-bold text-xl">₱@totalAmount</span>
                </div>

                <!-- Additional Info -->
                <div class="mt-4 p-3 bg-coffee-cream bg-opacity-20 rounded-lg text-xs text-coffee-medium italic text-center">
                    Please present this receipt upon check-in. For any questions, contact our support at support@addie.colaf_hotel
                </div>
            </div>

            <!-- Footer Buttons -->
            <div class="p-6 bg-coffee-cream bg-opacity-10 border-t border-coffee-cream flex flex-col sm:flex-row gap-3">
                <button id="downloadInvoice" class="flex-1 py-3 bg-coffee-accent text-white font-medium rounded-lg hover:bg-coffee-dark transition-colors duration-150 flex items-center justify-center">
                    <svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    <span>Download Invoice</span>
                </button>
                <button id="viewDetails" class="flex-1 py-3 bg-coffee-medium text-white font-medium rounded-lg hover:bg-coffee-dark transition-colors duration-150 flex items-center justify-center">
                    <svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    <span>View Details</span>
                </button>
                <button id="closeModal" class="flex-1 py-3 border border-coffee-medium text-coffee-dark font-medium rounded-lg hover:bg-coffee-cream hover:border-coffee-dark transition-colors duration-150 flex items-center justify-center">
                    <svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    <span>Close</span>
                </button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("closeModal").addEventListener("click", function () {
                document.getElementById("bookingModal").classList.add("opacity-0");
                setTimeout(function() {
                    document.getElementById("bookingModal").style.display = "none";
                }, 300);
            });
        });
    </script>
}
<script>
        document.addEventListener("DOMContentLoaded", function() {
        // Get all DOM elements for filtering and sorting
        const searchInput = document.getElementById("searchInput");
        const guestSort = document.getElementById("guestSort");
        const bookingSort = document.getElementById("bookingSort");
        const checkinSort = document.getElementById("checkinSort");
        const checkoutSort = document.getElementById("checkoutSort");
        const hideCancelled = document.getElementById("hideCancelled");
        const applyFilters = document.getElementById("applyFilters");
        const resetFilters = document.getElementById("resetFilters");

        // Get all table rows
        const tableRows = Array.from(document.querySelector("tbody").querySelectorAll("tr"));

        // Store original order of rows
        const originalRows = [...tableRows];

        // Apply filters and sorting when the Apply button is clicked
        applyFilters.addEventListener("click", function() {
            filterAndSortBookings();
        });

        // Reset all filters and restore original table
        resetFilters.addEventListener("click", function() {
            searchInput.value = "";
            guestSort.value = "";
            bookingSort.value = "";
            checkinSort.value = "";
            checkoutSort.value = "";
            hideCancelled.checked = true;

            // Restore original table rows in their original order
            const tbody = document.querySelector("tbody");
            tbody.innerHTML = "";
            originalRows.forEach(row => {
                if (hideCancelled.checked && row.querySelector("td:nth-last-child(2)").textContent.trim() === "Cancelled") {
                    return;
                }
                tbody.appendChild(row.cloneNode(true));
            });
        });

        // Main function to filter and sort bookings
        function filterAndSortBookings() {
            let filteredRows = [...originalRows];

            // Filter by search term
            if (searchInput.value.trim() !== "") {
                const searchTerm = searchInput.value.trim().toLowerCase();
                filteredRows = filteredRows.filter(row => {
                    const rowText = row.textContent.toLowerCase();
                    return rowText.includes(searchTerm);
                });
            }

            // Hide cancelled bookings if checked
            if (hideCancelled.checked) {
                filteredRows = filteredRows.filter(row => {
                    const statusCell = row.querySelector("td:nth-last-child(2)");
                    return !statusCell.textContent.includes("Cancelled");
                });
            }

            // Apply sorting
            const sortGuestName = guestSort.value;
            const sortBookingId = bookingSort.value;
            const sortCheckinDate = checkinSort.value;
            const sortCheckoutDate = checkoutSort.value;

            // Apply the most recently selected sort option
            if (sortGuestName) {
                filteredRows.sort((a, b) => {
                    // Get guest name from the first column if staff/admin role, otherwise handle case where guest name isn't displayed
                    let aName, bName;
                    const isStaffView = a.cells.length > 6; // Check if guest name column exists

                    if (isStaffView) {
                        aName = a.cells[0].textContent.trim().toLowerCase();
                        bName = b.cells[0].textContent.trim().toLowerCase();
                    } else {
                        // Fallback to booking ID if guest name isn't available
                        return 0;
                    }

                    return sortGuestName === "asc" ?
                        aName.localeCompare(bName) :
                        bName.localeCompare(aName);
                });
            }

            if (sortBookingId) {
                filteredRows.sort((a, b) => {
                    // Get the booking ID column (position depends on if guest name is shown)
                    const colIndexForId = a.cells.length > 6 ? 1 : 0;

                    const aId = parseInt(a.cells[colIndexForId].textContent.replace("#", "").trim());
                    const bId = parseInt(b.cells[colIndexForId].textContent.replace("#", "").trim());

                    return sortBookingId === "asc" ? aId - bId : bId - aId;
                });
            }

            if (sortCheckinDate) {
                filteredRows.sort((a, b) => {
                    // Get the check-in date column (position depends on if guest name is shown)
                    const colIndexForCheckin = a.cells.length > 6 ? 3 : 2;

                    const aDate = new Date(a.cells[colIndexForCheckin].textContent.trim());
                    const bDate = new Date(b.cells[colIndexForCheckin].textContent.trim());

                    return sortCheckinDate === "asc" ? aDate - bDate : bDate - aDate;
                });
            }

            if (sortCheckoutDate) {
                filteredRows.sort((a, b) => {
                    // Get the check-out date column (position depends on if guest name is shown)
                    const colIndexForCheckout = a.cells.length > 6 ? 4 : 3;

                    const aDate = new Date(a.cells[colIndexForCheckout].textContent.trim());
                    const bDate = new Date(b.cells[colIndexForCheckout].textContent.trim());

                    return sortCheckoutDate === "asc" ? aDate - bDate : bDate - aDate;
                });
            }

            // Update the table with filtered and sorted rows
            const tbody = document.querySelector("tbody");
            tbody.innerHTML = "";

            if (filteredRows.length === 0) {
                // Create a "no results" row
                const noResultsRow = document.createElement("tr");
                const noResultsCell = document.createElement("td");
                noResultsCell.colSpan = tableRows[0] ? tableRows[0].cells.length : 7;
                noResultsCell.className = "py-8 text-center text-coffee-medium";
                noResultsCell.textContent = "No bookings match your search criteria";
                noResultsRow.appendChild(noResultsCell);
                tbody.appendChild(noResultsRow);
            } else {
                // Add filtered rows to table
                filteredRows.forEach(row => {
                    tbody.appendChild(row.cloneNode(true));
                });
            }
        }

        // Allow pressing Enter in search box to apply filters
        searchInput.addEventListener("keyup", function(event) {
            if (event.key === "Enter") {
                filterAndSortBookings();
            }
        });

        // Add event listener to the modal close button
        const closeModalBtn = document.getElementById("closeModal");
        if (closeModalBtn) {
            closeModalBtn.addEventListener("click", function() {
                const modal = document.getElementById("bookingModal");
                modal.classList.add("opacity-0");
                setTimeout(function() {
                    modal.style.display = "none";
                }, 300);
            });
        }

        // Add functionality to view details button in modal
        const viewDetailsBtn = document.getElementById("viewDetails");
        if (viewDetailsBtn) {
            viewDetailsBtn.addEventListener("click", function() {
                // Get the booking ID from the modal
                const bookingIdElement = document.querySelector("#bookingModal .bg-coffee-dark.text-white.text-xs");
                if (bookingIdElement) {
                    const bookingId = bookingIdElement.textContent.trim().replace("#", "");
                    window.location.href = `/Booking/Details/${bookingId}`;
                }
            });
        }

        // Add functionality to download invoice button in modal
        const downloadInvoiceBtn = document.getElementById("downloadInvoice");
        if (downloadInvoiceBtn) {
            downloadInvoiceBtn.addEventListener("click", function() {
                // Get the booking ID from the modal
                const bookingIdElement = document.querySelector("#bookingModal .bg-coffee-dark.text-white.text-xs");
                if (bookingIdElement) {
                    const bookingId = bookingIdElement.textContent.trim().replace("#", "");
                    window.location.href = `/Booking/Invoice/${bookingId}`;
                }
            });
        }
    });
</script>