@{
    ViewBag.Title = "User Management";
}
@inject IHttpContextAccessor HttpContextAccessor
@model IEnumerable<COLAFHotel.Models.User>

@{
    var user = HttpContextAccessor.HttpContext?.Session.GetString("User");
    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");
}

<div class="container mx-auto py-8 px-4">
    <div class="bg-white rounded-xl shadow-lg overflow-hidden border border-coffee-cream p-8 mb-8">
        @if (!string.IsNullOrEmpty(role))
        {
            <!-- Header Section -->
            <div class="flex flex-col md:flex-row justify-between items-center mb-8 border-b border-coffee-cream pb-6">
                <div class="flex items-center mb-4 md:mb-0">
                    <i class="fas fa-users-cog text-coffee-accent text-3xl mr-4"></i>
                    <h1 class="text-3xl font-light text-coffee-dark">User Management</h1>
                </div>
                <div class="bg-coffee-cream bg-opacity-20 px-4 py-2 rounded-lg">
                    <p class="text-coffee-medium"><span class="font-semibold">Current Role:</span> @role</p>
                </div>
            </div>

            <!-- Filters Section -->
            <div class="flex flex-col md:flex-row justify-start items-center mb-8 gap-4">
                <!-- Role Filter with Icon -->
                <div class="relative w-full md:w-auto">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <i class="fas fa-user-tag text-coffee-medium"></i>
                    </div>
                    <select id="roleFilter" class="bg-white border border-coffee-light text-coffee-dark pl-10 pr-4 py-3 rounded-lg focus:ring-coffee-accent focus:border-coffee-accent block w-full md:w-48" onchange="filterUsers()">
                        <option value="">All Roles</option>
                        <option value="Guest">Guest</option>
                        <option value="Admin">Admin</option>
                        <option value="Housekeeper">Housekeeper</option>
                        <option value="Staff">Staff</option>
                    </select>
                </div>

                <!-- Search Input with Icon -->
                <div class="relative w-full md:flex-1">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <i class="fas fa-search text-coffee-medium"></i>
                    </div>
                    <input type="text" id="searchInput" placeholder="Search by name, email, or role..."
                           class="bg-white border border-coffee-light text-coffee-dark pl-10 pr-4 py-3 rounded-lg focus:ring-coffee-accent focus:border-coffee-accent block w-full"
                           onkeyup="filterUsers()">
                </div>
            </div>

            <!-- Users Grid -->
            @if (Model?.Any() == true)
            {
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    @foreach (var userItem in Model)
                    {
                        <div class="bg-white rounded-xl border border-coffee-cream shadow-md overflow-hidden user-card transition-all duration-300 hover:shadow-lg"
                             data-username="@userItem.username"
                             data-email="@userItem.email"
                             data-role="@userItem.role">

                            <!-- User Card Header -->
                            <div class="bg-coffee-medium p-4">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <div class="w-10 h-10 rounded-full bg-coffee-cream flex items-center justify-center text-coffee-dark font-bold">
                                            @userItem.username.Substring(0, 1).ToUpper()
                                        </div>
                                        <div class="ml-3">
                                            <h3 class="text-white text-sm font-medium">@userItem.username</h3>
                                            <p class="text-coffee-cream text-xs truncate max-w-xs">@userItem.email</p>
                                        </div>
                                    </div>
                                    <div class="flex items-center justify-center rounded-full p-1
                                                        @(userItem.role == "Admin" ? "bg-red-100 text-red-800" :
                                                                                       userItem.role == "Staff" ? "bg-blue-100 text-blue-800" :
                                                                                       userItem.role == "Housekeeper" ? "bg-green-100 text-green-800" :
                                                                                       "bg-gray-100 text-gray-800")">
                            <span class="text-xs font-medium px-2 py-1">@userItem.role</span>
                        </div>
                    </div>
                </div>

                            <!-- User Card Body -->
                            <div class="p-4">
                                <div class="mb-4">
                                    <label for="roleSelect_@userItem.user_id" class="block text-sm font-medium text-coffee-dark mb-1">Role Assignment:</label>
                                    <select class="w-full px-3 py-2 rounded-lg bg-coffee-cream bg-opacity-20 border border-coffee-light text-coffee-dark focus:ring-coffee-accent focus:border-coffee-accent"
                                            id="roleSelect_@userItem.user_id"
                                            data-current-role="@userItem.role"
                                            onchange="enableApplyButton(@userItem.user_id)">
                                        <option value="Guest" selected="@(userItem.role == "Guest" ? "selected" : null)">Guest</option>
                                        <option value="Admin" selected="@(userItem.role == "Admin" ? "selected" : null)">Admin</option>
                                        <option value="Housekeeper" selected="@(userItem.role == "Housekeeper" ? "selected" : null)">Housekeeper</option>
                                        <option value="Staff" selected="@(userItem.role == "Staff" ? "selected" : null)">Staff</option>
                                        <option value="Housekeeping Manager" selected="@(userItem.role == "Housekeeping Manager" ? "selected" : null)">Housekeeping Manager</option>
                                    </select>
                                </div>
                            </div>

                            <!-- User Card Footer -->
                            <div class="bg-coffee-cream bg-opacity-20 p-4 flex justify-between">
                                <button class="bg-coffee-accent hover:bg-coffee-medium text-white px-4 py-2 rounded-lg transition-all duration-300 disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed flex items-center"
                                        id="applyBtn_@userItem.user_id"
                                        onclick="applyChanges(@userItem.user_id)"
                                        disabled>
                                    <i class="fas fa-check mr-2"></i> Apply
                                </button>
                                <button class="bg-white border border-red-500 text-red-500 hover:bg-red-500 hover:text-white px-4 py-2 rounded-lg transition-all duration-300 flex items-center"
                                        onclick="confirmDelete(@userItem.user_id)">
                                    <i class="fas fa-trash mr-2"></i> Delete
                                </button>
                            </div>
                        </div>
                        }
                </div>
            }
            else
            {
                <div class="flex flex-col items-center justify-center bg-coffee-cream bg-opacity-20 rounded-xl p-12">
                    <i class="fas fa-users-slash text-coffee-medium text-5xl mb-4"></i>
                    <p class="text-coffee-medium text-xl">No users found.</p>
                </div>
            }
        }
        else
        {
            <div class="flex flex-col items-center justify-center bg-red-100 rounded-xl p-12">
                <i class="fas fa-exclamation-triangle text-red-500 text-5xl mb-4"></i>
                <p class="text-red-500 font-semibold text-xl">Access Denied: Role not defined.</p>
                <p class="text-coffee-medium mt-2">Redirecting to login page...</p>
            </div>
            <script>
                setTimeout(function () {
                    window.location.href = "/User/Login"; // Redirect to login page after 3 seconds
                }, 3000);
            </script>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="hidden fixed inset-0 bg-coffee-dark bg-opacity-60 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-xl shadow-lg max-w-sm animate-fade-in">
        <div class="flex items-center mb-4">
            <i class="fas fa-exclamation-triangle text-red-500 text-2xl mr-3"></i>
            <h3 class="text-xl font-semibold text-coffee-dark">Confirm Deletion</h3>
        </div>
        <p class="text-coffee-medium mb-6">Are you sure you want to delete this user? This action cannot be undone.</p>
        <div class="flex justify-end space-x-3">
            <button class="px-4 py-2 bg-coffee-cream text-coffee-dark rounded-lg hover:bg-coffee-cream hover:bg-opacity-80 transition-all"
                    onclick="closeModal()">
                Cancel
            </button>
            <button id="confirmDeleteBtn"
                    class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-all">
                Delete
            </button>
        </div>
    </div>
</div>

<script>
    function enableApplyButton(userId) {
        const selectElement = document.getElementById(`roleSelect_${userId}`);
        const selectedRole = selectElement.value;
        const currentRole = selectElement.getAttribute("data-current-role");

        const applyButton = document.getElementById(`applyBtn_${userId}`);

        // Enable the button only if the role has been changed
        if (selectedRole !== currentRole) {
            applyButton.disabled = false;
        } else {
            applyButton.disabled = true;
        }
    }

    function applyChanges(user_id) {
        const selectElement = document.getElementById(`roleSelect_${user_id}`);
        const newRole = selectElement.value;

        console.log(`🔍 Updating role for user_id: ${user_id}, new role: ${newRole}`);

        fetch(`/User/UpdateRole`, {
            method: 'POST',
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ user_id: user_id, role: newRole }) // ✅ Keep `user_id` from Razor
        })
        .then(response => response.json())
        .then(data => {
            console.log(`✅ Response from server:`, data);
            alert(data.message);
            location.reload(); // ✅ Refresh to see the updated roles
        })
        .catch(error => console.error('❌ Error updating role:', error));
    }

    function confirmDelete(user_id) {
        console.log(`🔍 Attempting to delete user_id: ${user_id}`);

        if (!confirm("Are you sure you want to delete this user?")) {
            console.log("❌ Deletion cancelled.");
            return;
        }

        fetch(`/User/DeleteUser/${user_id}`, { method: 'DELETE' }) // ✅ Use `user_id` from Razor
            .then(response => response.json())
            .then(data => {
                console.log(`✅ User deleted successfully:`, data);
                alert(data.message);
                location.reload(); // ✅ Refresh after deletion
            })
            .catch(error => console.error('❌ Error deleting user:', error));
    }
    function closeModal() {
        document.getElementById("deleteModal").classList.add("hidden");
    }
    function filterUsers() {
        let searchQuery = document.getElementById("searchInput").value.toLowerCase();
        let selectedRole = document.getElementById("roleFilter").value;
        let userCards = document.querySelectorAll(".user-card");

        userCards.forEach(card => {
            let username = card.getAttribute("data-username").toLowerCase();
            let email = card.getAttribute("data-email").toLowerCase();
            let role = card.getAttribute("data-role");

            let matchesSearch = username.includes(searchQuery) || email.includes(searchQuery);
            let matchesRole = selectedRole === "" || role === selectedRole;

            if (matchesSearch && matchesRole) {
                card.style.display = "block"; // Show matching users
            } else {
                card.style.display = "none"; // Hide non-matching users
            }
        });
    }

</script>
