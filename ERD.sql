-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.booking
(
    booking_id serial NOT NULL,
    guest_id integer,
    room_id integer,
    check_in_date date NOT NULL,
    check_out_date date NOT NULL,
    status character varying(20) COLLATE pg_catalog."default",
    total_amount numeric(10, 2) NOT NULL,
    discount_id integer,
    CONSTRAINT booking_pkey PRIMARY KEY (booking_id)
);

CREATE TABLE IF NOT EXISTS public.discount
(
    discount_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    discount_value numeric(5, 2),
    CONSTRAINT discount_pkey PRIMARY KEY (discount_id)
);

CREATE TABLE IF NOT EXISTS public.guest
(
    guest_id serial NOT NULL,
    user_id integer,
    phone character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT guest_pkey PRIMARY KEY (guest_id),
    CONSTRAINT guest_phone_key UNIQUE (phone)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    firstname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    role character varying(20) COLLATE pg_catalog."default" DEFAULT 'Guest'::character varying,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.housekeeping_task
(
    task_id serial NOT NULL,
    room_id integer,
    description text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default",
    assigned_to integer,
    CONSTRAINT housekeeping_task_pkey PRIMARY KEY (task_id)
);

CREATE TABLE IF NOT EXISTS public.room
(
    room_id serial NOT NULL,
    room_number character varying(20) COLLATE pg_catalog."default" NOT NULL,
    category character varying(50) COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default",
    price numeric(10, 2) NOT NULL,
    image_url text COLLATE pg_catalog."default" NOT NULL,
    image_type character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT room_pkey PRIMARY KEY (room_id),
    CONSTRAINT room_room_number_key UNIQUE (room_number)
);

CREATE TABLE IF NOT EXISTS public.maintenance_request
(
    request_id serial NOT NULL,
    room_id integer,
    issue_description text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default",
    reported_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    resolved_date timestamp without time zone,
    CONSTRAINT maintenance_request_pkey PRIMARY KEY (request_id)
);

CREATE TABLE IF NOT EXISTS public.notification
(
    notification_id serial NOT NULL,
    user_id integer,
    message text COLLATE pg_catalog."default" NOT NULL,
    sent_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    read_status boolean DEFAULT false,
    CONSTRAINT notification_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.feedback
(
    feedback_id serial NOT NULL,
    booking_id integer,
    guest_id integer,
    rating integer,
    comment text COLLATE pg_catalog."default",
    created_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT feedback_pkey PRIMARY KEY (feedback_id)
);

CREATE TABLE IF NOT EXISTS public.booking_service
(
    booking_id integer NOT NULL,
    service_id integer NOT NULL,
    CONSTRAINT booking_service_pkey PRIMARY KEY (booking_id, service_id)
);

CREATE TABLE IF NOT EXISTS public.special_service
(
    service_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    price numeric(10, 2) NOT NULL,
    CONSTRAINT special_service_pkey PRIMARY KEY (service_id)
);

CREATE TABLE IF NOT EXISTS public.invoice
(
    invoice_id serial NOT NULL,
    booking_id integer,
    total_amount numeric(10, 2) NOT NULL,
    issue_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT invoice_pkey PRIMARY KEY (invoice_id)
);

CREATE TABLE IF NOT EXISTS public.payment
(
    payment_id serial NOT NULL,
    booking_id integer,
    payment_method character varying(50) COLLATE pg_catalog."default",
    amount numeric(10, 2) NOT NULL,
    payment_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT payment_pkey PRIMARY KEY (payment_id)
);

ALTER TABLE IF EXISTS public.booking
    ADD CONSTRAINT booking_discount_id_fkey FOREIGN KEY (discount_id)
    REFERENCES public.discount (discount_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.booking
    ADD CONSTRAINT booking_guest_id_fkey FOREIGN KEY (guest_id)
    REFERENCES public.guest (guest_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.booking
    ADD CONSTRAINT booking_room_id_fkey FOREIGN KEY (room_id)
    REFERENCES public.room (room_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guest
    ADD CONSTRAINT guest_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.housekeeping_task
    ADD CONSTRAINT housekeeping_task_assigned_to_fkey FOREIGN KEY (assigned_to)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.housekeeping_task
    ADD CONSTRAINT housekeeping_task_room_id_fkey FOREIGN KEY (room_id)
    REFERENCES public.room (room_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.maintenance_request
    ADD CONSTRAINT maintenance_request_room_id_fkey FOREIGN KEY (room_id)
    REFERENCES public.room (room_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notification
    ADD CONSTRAINT notification_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.feedback
    ADD CONSTRAINT feedback_booking_id_fkey FOREIGN KEY (booking_id)
    REFERENCES public.booking (booking_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.feedback
    ADD CONSTRAINT feedback_guest_id_fkey FOREIGN KEY (guest_id)
    REFERENCES public.guest (guest_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.booking_service
    ADD CONSTRAINT booking_service_booking_id_fkey FOREIGN KEY (booking_id)
    REFERENCES public.booking (booking_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.booking_service
    ADD CONSTRAINT booking_service_service_id_fkey FOREIGN KEY (service_id)
    REFERENCES public.special_service (service_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.invoice
    ADD CONSTRAINT invoice_booking_id_fkey FOREIGN KEY (booking_id)
    REFERENCES public.booking (booking_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.payment
    ADD CONSTRAINT payment_booking_id_fkey FOREIGN KEY (booking_id)
    REFERENCES public.booking (booking_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;
